module SkelGrammar where

-- Haskell module generated by the BNF converter

import AbsGrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transUIdent :: UIdent -> Result
transUIdent x = case x of
  UIdent string -> failure x
transLIdent :: LIdent -> Result
transLIdent x = case x of
  LIdent string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog topdefs -> failure x
transTopDef :: TopDef -> Result
transTopDef x = case x of
  VarDef vdef -> failure x
  TypDef tdef -> failure x
transVDef :: VDef -> Result
transVDef x = case x of
  Def ident binds exp -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EMat exp mcases -> failure x
  ELet vdefs exp -> failure x
  EIf exp1 exp2 exp3 -> failure x
  ELam idents exp -> failure x
  ESmal exp1 exp2 -> failure x
  EEq exp1 exp2 -> failure x
  EAdd exp1 exp2 -> failure x
  ESub exp1 exp2 -> failure x
  EMul exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  ECons exp1 exp2 -> failure x
  EApp exp1 exp2 -> failure x
  ELis exps -> failure x
  ETup exps -> failure x
  EInt integer -> failure x
  ECon uident -> failure x
  EVar ident -> failure x
transMCase :: MCase -> Result
transMCase x = case x of
  MCas bind exp -> failure x
transBind :: Bind -> Result
transBind x = case x of
  BLis binds -> failure x
  BTup binds -> failure x
  BVar ident -> failure x
  BInt integer -> failure x
  BSkip -> failure x
  BULis bind1 bind2 -> failure x
  BCon uident binds -> failure x
transTDef :: TDef -> Result
transTDef x = case x of
  TDef uident lidents type_ -> failure x
  TClar ident type_ -> failure x
transType :: Type -> Result
transType x = case x of
  TBnb uident types -> failure x
  TUnb lident -> failure x
  TTup types -> failure x
  TLis type_ -> failure x
  TFun type_1 type_2 -> failure x
  TCData subtypes -> failure x
transSubType :: SubType -> Result
transSubType x = case x of
  SubType uident types -> failure x

