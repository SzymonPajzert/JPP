-- automatically generated by BNF Converter
module Main where


import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )

import LexGrammar
import ParGrammar
import SkelGrammar
import PrintGrammar
import AbsGrammar

import ErrM

type ParseFun a = [Token] -> Err a

type ProgramGram = [TopDef]

desugar :: Program -> Program



-- TODO maybe use verbosity of error messages
type Verbosity = Int

parseGen :: ParseFun a -> String -> Err a
parseGen p s = p $ myLexer s

parse = parseGen pListTopDef



main :: IO ()
main = do
  [fileName] <- getArgs
  file <- readFile fileName

  case parse file of
    Ok absTree -> putStrLn "Parse completed"
    Bad message -> putStrLn message




