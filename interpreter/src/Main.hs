{-# OPTIONS_GHC -O2 -Wall -fwarn-tabs -fdefer-typed-holes #-}


-- automatically generated by BNF Converter
module Main where


import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )
-- import System.Exit ( exitFailure, exitSuccess )

import LexGrammar
import ParGrammar
import SkelGrammar
import PrintGrammar
import DynamicGrammar
import AbsGrammar as Abs

import ErrM

type ParseFun a = [Token] -> Err a

type ProgramGram = [Abs.TopDef]
type Program = [Dyn.Def]

-- TODO maybe use verbosity of error messages
type Verbosity = Int






main :: IO ()
main = do
  [fileName] <- getArgs
  file <- readFile fileName

  case parse file of
    Ok absTree ->
      putStrLn "Parse completed"
      interpret absTree
    Bad message -> putStrLn message




