--- NOTE: do not use at once separator and terminator
--- NOTE happy -i lists shift reduce conflicts in a file

Prog. Program ::= [VDef] ;
separator nonempty VDef ";" ;

--- syntactic sugar for lambdas - variables are lambdas with 0 arguments
Def. VDef ::= [Ident] "=" Exp1 ;
separator nonempty Ident "" ;

{-

token UIdent (upper (letter | digit | '_')*) ;

--- Unbound type variable, thats extracted from environment
TUnb.  Type ::=  UIdent ; 
TTup.  Type ::= "(" [Type] ")" ;
separator Type "," ; 


EMat. Exp1 ::= "match" Exp "with" "{" [MCase] "}";

TNew. Type ::= "newtype" UIdent  ;
TData. Type ::= "data" ;

MCas. MCase ::= Bind "->" Exp ;
separator nonempty MCase "|" ;

BHint. Bind ::= Ident ":" Type ;
BVar.  Bind ::= Ident ;

-}

ELam. Exp1 ::= "fun" [Ident] "->" Exp1 ;

ELet. Exp1 ::= "let" [VDef] "in" Exp1 ;


_. Exp  ::= Exp1 ;
_. Exp1 ::= Exp2 ;
_. Exp3 ::= Exp4 ;

EApp. Exp2 ::= [Exp3] ;
-- NOTE BNFC doesnt see spaces since they are removed by lexer  

separator nonempty Exp3 "" ;

ETup. Exp4 ::= "(" [Exp] ")" ;
ELis. Exp4 ::= "[" [Exp] "]" ;
separator Exp "," ;

-- EIf.  Exp1 ::= "if" Exp "then" Exp "else" Exp ;


EInt. Exp4 ::= Integer ;
EBool.Exp4 ::= Boolean ;
EVar. Exp4 ::= Ident ;

BTrue.  Boolean ::= "True" ;
BFalse. Boolean ::= "False" ;

comment "--" ;
comment "{-" "-}" ;