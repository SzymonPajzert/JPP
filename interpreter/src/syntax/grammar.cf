--- NOTE: do not use at once separator and terminator
--- NOTE happy -i lists shift reduce conflicts in a file

Prog. Program ::= [VDef] ;
separator nonempty VDef " " ;

--- syntactic sugar for lambdas - variables are lambdas with 0 arguments
Def. VDef ::= [Ident] "=" Exp1 ;
separator nonempty Ident " " ;


token UIdent (upper (letter | digit | '_')*) ;

--- Unbound type variable, thats extracted from environment
TUnb.  Type ::=  UIdent ; 
TTup.  Type ::= "(" [Type] ")" ;
separator Type "," ; 

TNew. Type ::= "newtype" UIdent  ;
TData. Type ::= "data" ;

MCas. MCase ::= Bind "->" Exp ;
separator nonempty MCase "|" ;

BHint. Bind ::= Ident ":" Type ;
BVar.  Bind ::= Ident ;

--- ETup. Exp2 ::= "(" Exp ")" ;
--- separator Exp "," ;

EMat. Exp1 ::= "match" Exp "with" "{" [MCase] "}";
ELam. Exp1 ::= "fun" [Ident] "->" Exp ;
EApp. Exp2 ::= [Ident] ;

ELet. Exp1 ::= "let" VDef "in" Exp1 ;

EIf.  Exp1 ::= "if" Exp "then" Exp "else" Exp ;
EInt. Exp2 ::= Integer ;
EBool.Exp2 ::= Boolean ;

_. Exp  ::= Exp1 ;
_. Exp1 ::= Exp2 ;
_. Exp2 ::= Exp3 ;
_. Exp3 ::= "(" Exp ")" ;

BTrue.  Boolean ::= "True" ;
BFalse. Boolean ::= "False" ;

comment "--" ;
comment "{-" "-}" ;